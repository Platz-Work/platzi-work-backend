# Generated by Django 3.1.4 on 2020-12-19 11:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_enumfield.db.fields
import jobs.enums
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Creado')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Actualizado')),
                ('name', models.CharField(error_messages={'blank': "The name field can't be blank.", 'invalid': 'The name field is invalid.', 'max_length': 'The name field must be at most 255 characters.', 'null': "The name field can't be null."}, max_length=255, verbose_name='Name')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Creado')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Actualizado')),
                ('name', models.CharField(error_messages={'blank': "The name field can't be blank.", 'invalid': 'The name field is invalid.', 'max_length': 'The name field must be at most 255 characters.', 'null': "The name field can't be null."}, max_length=255, verbose_name='Name')),
                ('description', models.TextField(error_messages={'blank': "The description field can't be blank.", 'invalid': 'The description field is invalid.', 'null': "The description field can't be null."}, verbose_name='Description')),
                ('site_url', models.URLField(error_messages={'blank': "The site_url field can't be blank.", 'invalid': 'The site_url field is invalid.', 'max_length': 'The site_url field must be at most 200 characters.', 'null': "The site_url field can't be null."}, verbose_name='Site URL')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Creado')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Actualizado')),
                ('name', models.CharField(error_messages={'blank': "The name field can't be blank.", 'invalid': 'The name field is invalid.', 'max_length': 'The name field must be at most 255 characters.', 'null': "The name field can't be null."}, max_length=255, verbose_name='Name')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Creado')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Actualizado')),
                ('code', models.CharField(error_messages={'blank': "The code field can't be blank.", 'invalid': 'The code field is invalid.', 'max_length': 'The code field must be at most 255 characters.', 'null': "The code field can't be null."}, max_length=3, verbose_name='Code')),
                ('name', models.CharField(error_messages={'blank': "The name field can't be blank.", 'invalid': 'The name field is invalid.', 'max_length': 'The name field must be at most 255 characters.', 'null': "The name field can't be null."}, max_length=255, verbose_name='Name')),
                ('to_USD', models.FloatField(error_messages={'blank': "The to_USD field can't be blank.", 'invalid': 'The to_USD field is invalid.', 'null': "The to_USD field can't be null."}, verbose_name='To USD')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Creado')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Actualizado')),
                ('name', models.CharField(error_messages={'blank': "The name field can't be blank.", 'invalid': 'The name field is invalid.', 'max_length': 'The name field must be at most 255 characters.', 'null': "The name field can't be null."}, max_length=255, verbose_name='Name')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Creado')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Actualizado')),
                ('salary_start', models.PositiveIntegerField(error_messages={'blank': "The salary_start field can't be blank.", 'invalid': 'The salary_start field is invalid.', 'null': "The salary_start field can't be null."}, verbose_name='Salary from')),
                ('salary_end', models.PositiveIntegerField(error_messages={'blank': "The salary_end field can't be blank.", 'invalid': 'The salary_end field is invalid.', 'null': "The salary_end field can't be null."}, verbose_name='Salary up')),
                ('english_level', django_enumfield.db.fields.EnumField(default=0, enum=jobs.enums.EnglishLevel, error_messages={'blank': "The english_level field can't be blank.", 'invalid': 'The english_level field is invalid.', 'null': "The english_level field can't be null."})),
                ('category', models.ForeignKey(error_messages={'blank': "The category_id field can't be blank.", 'invalid': 'The category_id field is invalid.', 'null': "The category_id field can't be null."}, on_delete=django.db.models.deletion.PROTECT, to='jobs.category')),
                ('country', models.ForeignKey(error_messages={'blank': "The country_id field can't be blank.", 'invalid': 'The country_id field is invalid.', 'null': "The country_id field can't be null."}, on_delete=django.db.models.deletion.PROTECT, to='jobs.country')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobOffer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Creado')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Actualizado')),
                ('position', models.CharField(error_messages={'blank': "The position field can't be blank.", 'invalid': 'The position field is invalid.', 'max_length': 'The position field must be at most 255 characters.', 'null': "The position field can't be null."}, max_length=100, verbose_name='Position')),
                ('description', models.TextField(error_messages={'blank': "The description field can't be blank.", 'invalid': 'The description field is invalid.', 'null': "The description field can't be null."}, verbose_name='Description')),
                ('seniority', django_enumfield.db.fields.EnumField(default=0, enum=jobs.enums.Seniority, error_messages={'blank': "The seniority field can't be blank.", 'invalid': 'The seniority field is invalid.', 'null': "The seniority field can't be null."})),
                ('english_level', django_enumfield.db.fields.EnumField(default=0, enum=jobs.enums.EnglishLevel, error_messages={'blank': "The english_level field can't be blank.", 'invalid': 'The english_level field is invalid.', 'null': "The english_level field can't be null."})),
                ('cities', models.CharField(error_messages={'blank': "The cities field can't be blank.", 'invalid': 'The cities field is invalid.', 'max_length': 'The cities field must be at most 255 characters.', 'null': "The cities field can't be null."}, max_length=100, verbose_name='cities')),
                ('soft_skills', models.TextField(blank=True, error_messages={'blank': "The description field can't be blank.", 'invalid': 'The description field is invalid.', 'null': "The description field can't be null."}, null=True, verbose_name='Description')),
                ('salary_start', models.PositiveIntegerField(error_messages={'blank': "The salary_start field can't be blank.", 'invalid': 'The salary_start field is invalid.', 'null': "The salary_start field can't be null."}, verbose_name='Salary from')),
                ('salary_end', models.PositiveIntegerField(error_messages={'blank': "The salary_end field can't be blank.", 'invalid': 'The salary_end field is invalid.', 'null': "The salary_end field can't be null."}, verbose_name='Salary up')),
                ('benefits', models.TextField(blank=True, error_messages={'blank': "The description field can't be blank.", 'invalid': 'The description field is invalid.', 'null': "The description field can't be null."}, null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(error_messages={'blank': "The is_active field can't be blank.", 'invalid': 'The is_active field is invalid.', 'null': "The is_active field can't be null."}, verbose_name='Active')),
                ('category', models.ForeignKey(error_messages={'blank': "The category_id field can't be blank.", 'invalid': 'The category_id field is invalid.', 'null': "The category_id field can't be null."}, on_delete=django.db.models.deletion.PROTECT, to='jobs.category')),
                ('company', models.ForeignKey(error_messages={'blank': "The company_id field can't be blank.", 'invalid': 'The company_id field is invalid.', 'null': "The company_id field can't be null."}, on_delete=django.db.models.deletion.PROTECT, to='jobs.company')),
                ('country', models.ForeignKey(error_messages={'blank': "The country_id field can't be blank.", 'invalid': 'The country_id field is invalid.', 'null': "The country_id field can't be null."}, on_delete=django.db.models.deletion.PROTECT, to='jobs.country')),
                ('currency', models.ForeignKey(error_messages={'blank': "The currency_id field can't be blank.", 'invalid': 'The currency_id field is invalid.', 'null': "The currency_id field can't be null."}, on_delete=django.db.models.deletion.PROTECT, to='jobs.currency')),
                ('technologies', models.ManyToManyField(to='jobs.Technology', verbose_name='Technologies')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Creado')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Actualizado')),
                ('description', models.TextField(error_messages={'blank': "The description field can't be blank.", 'invalid': 'The description field is invalid.', 'null': "The description field can't be null."}, verbose_name='Description')),
                ('job_offer', models.ForeignKey(error_messages={'blank': "The job_offer_id field can't be blank.", 'invalid': 'The job_offer_id field is invalid.', 'null': "The job_offer_id field can't be null."}, on_delete=django.db.models.deletion.PROTECT, to='jobs.joboffer')),
                ('profile', models.ForeignKey(error_messages={'blank': "The profile_id field can't be blank.", 'invalid': 'The profile_id field is invalid.', 'null': "The profile_id field can't be null."}, on_delete=django.db.models.deletion.PROTECT, to='jobs.profile')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
    ]
